generator client {
  provider = "prisma-client-js"

}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String               @id @default(uuid())
  walletAddress       String               @unique @db.VarChar(42)
  name                String               @db.VarChar(100)
  profileImage        String?
  userPlan            String               @default("free")
  createdAt           DateTime             @default(now())
  messages            ChatMessage[]
  chatroomMemberships ChatroomMember[]
  chatrooms           Chatroom[]
  participants        MeetingParticipant[]
  subscriptions       Subscription[]
  videoMeetings       VideoMeeting[]

  @@index([walletAddress])
  @@map("users")
}

model Chatroom {
  id            String           @id @default(uuid())
  title         String           @db.VarChar(255)
  creatorId     String
  tokenGated    Boolean          @default(false)
  tokenAddress  String?          @db.VarChar(42)
  tokenStandard String?
  isActive      Boolean          @default(true)
  blockchainTx  String?
  createdAt     DateTime         @default(now())
  messages      ChatMessage[]
  members       ChatroomMember[]
  creator       User             @relation(fields: [creatorId], references: [id])

  @@index([creatorId])
  @@index([tokenAddress])
  @@map("chatrooms")
}

model ChatroomMember {
  id         String    @id @default(uuid())
  chatroomId String
  userId     String
  role       String    @default("member")
  joinedAt   DateTime  @default(now())
  leftAt     DateTime?
  isActive   Boolean   @default(true)
  chatroom   Chatroom  @relation(fields: [chatroomId], references: [id], onDelete: Cascade)
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([chatroomId, userId])
  @@index([chatroomId])
  @@index([userId])
  @@index([role])
  @@map("chatroom_members")
}

model ChatMessage {
  id                    String   @id @default(uuid())
  chatroomId            String
  senderId              String
  message               String
  sentAt                DateTime @default(now())
  encryptedSymmetricKey String?
  chatroom              Chatroom @relation(fields: [chatroomId], references: [id], onDelete: Cascade)
  sender                User     @relation(fields: [senderId], references: [id])

  @@index([chatroomId, sentAt])
  @@index([senderId])
  @@map("chat_messages")
}

model VideoMeeting {
  id            String               @id @default(uuid())
  title         String               @db.VarChar(255)
  hostId        String
  sessionId     String
  startTime     DateTime
  endTime       DateTime?
  tokenGated    Boolean              @default(false)
  tokenAddress  String?              @db.VarChar(42)
  tokenStandard String?
  recordingUrl  String?
  transcriptUrl String?
  blockchainTx  String?
  createdAt     DateTime             @default(now())
  participants  MeetingParticipant[]
  host          User                 @relation(fields: [hostId], references: [id])

  @@index([hostId])
  @@index([tokenAddress])
  @@map("video_meetings")
}

model MeetingParticipant {
  id        String       @id @default(uuid())
  meetingId String
  userId    String
  joinedAt  DateTime?
  leftAt    DateTime?
  meeting   VideoMeeting @relation(fields: [meetingId], references: [id], onDelete: Cascade)
  user      User         @relation(fields: [userId], references: [id])

  @@unique([meetingId, userId])
  @@index([meetingId])
  @@index([userId])
  @@map("meeting_participants")
}

model Subscription {
  id        String    @id @default(uuid())
  userId    String
  plan      String
  status    String    @default("active")
  startDate DateTime
  endDate   DateTime?
  active    Boolean   @default(true)
  createdAt DateTime  @default(now())
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("subscriptions")
}
